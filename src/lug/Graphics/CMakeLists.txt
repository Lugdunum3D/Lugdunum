set(INCROOT ${PROJECT_SOURCE_DIR}/include/lug/Graphics)
set(SRCROOT ${PROJECT_SOURCE_DIR}/src/lug/Graphics)

# all source files
set(SRC
    ${SRCROOT}/Graphics.cpp

    ${SRCROOT}/Builder/Material.cpp
    ${SRCROOT}/Builder/Mesh.cpp

    ${SRCROOT}/Light/Directional.cpp
    ${SRCROOT}/Light/Light.cpp
    ${SRCROOT}/Light/Point.cpp
    ${SRCROOT}/Light/Spot.cpp

    ${SRCROOT}/Module.cpp
    ${SRCROOT}/Node.cpp
    ${SRCROOT}/GltfLoader.cpp
    ${SRCROOT}/Resource.cpp
    ${SRCROOT}/ResourceManager.cpp

    ${SRCROOT}/Render/Camera.cpp
    ${SRCROOT}/Render/Material.cpp
    ${SRCROOT}/Render/Mesh.cpp
    ${SRCROOT}/Render/Queue.cpp
    ${SRCROOT}/Render/View.cpp

    ${SRCROOT}/Renderer.cpp

    ${SRCROOT}/Scene/MeshInstance.cpp
    ${SRCROOT}/Scene/MovableCamera.cpp
    ${SRCROOT}/Scene/MovableObject.cpp
    ${SRCROOT}/Scene/Node.cpp
    ${SRCROOT}/Scene/Scene.cpp

    ${SRCROOT}/Vulkan/API/Buffer.cpp
    ${SRCROOT}/Vulkan/API/CommandBuffer.cpp
    ${SRCROOT}/Vulkan/API/CommandPool.cpp
    ${SRCROOT}/Vulkan/API/DescriptorPool.cpp
    ${SRCROOT}/Vulkan/API/DescriptorSet.cpp
    ${SRCROOT}/Vulkan/API/DescriptorSetLayout.cpp
    ${SRCROOT}/Vulkan/API/Device.cpp
    ${SRCROOT}/Vulkan/API/DeviceMemory.cpp
    ${SRCROOT}/Vulkan/API/Fence.cpp
    ${SRCROOT}/Vulkan/API/Framebuffer.cpp
    ${SRCROOT}/Vulkan/API/Image.cpp
    ${SRCROOT}/Vulkan/API/ImageView.cpp
    ${SRCROOT}/Vulkan/API/Instance.cpp
    ${SRCROOT}/Vulkan/API/Loader.cpp
    ${SRCROOT}/Vulkan/API/Pipeline.cpp
    ${SRCROOT}/Vulkan/API/PipelineLayout.cpp
    ${SRCROOT}/Vulkan/API/Queue.cpp
    ${SRCROOT}/Vulkan/API/RTTI/Enum.cpp
    ${SRCROOT}/Vulkan/API/RenderPass.cpp
    ${SRCROOT}/Vulkan/API/Semaphore.cpp
    ${SRCROOT}/Vulkan/API/ShaderModule.cpp
    ${SRCROOT}/Vulkan/API/Swapchain.cpp

    ${SRCROOT}/Vulkan/Builder/Material.cpp
    ${SRCROOT}/Vulkan/Builder/Mesh.cpp

    ${SRCROOT}/Vulkan/Render/BufferPool.cpp
    ${SRCROOT}/Vulkan/Render/Camera.cpp
    ${SRCROOT}/Vulkan/Render/Material.cpp
    ${SRCROOT}/Vulkan/Render/Mesh.cpp
    ${SRCROOT}/Vulkan/Render/Pipeline.cpp
    ${SRCROOT}/Vulkan/Render/Pipeline/ShaderBuilder.cpp
    ${SRCROOT}/Vulkan/Render/Technique/Forward.cpp
    ${SRCROOT}/Vulkan/Render/Technique/Technique.cpp
    ${SRCROOT}/Vulkan/Render/View.cpp
    ${SRCROOT}/Vulkan/Render/Window.cpp

    ${SRCROOT}/Vulkan/Renderer.cpp

    ${SRCROOT}/Vulkan/Requirements/Core.hpp
    ${SRCROOT}/Vulkan/Requirements/Requirements.hpp

    ${SRCROOT}/Vulkan/Vulkan.cpp
)
source_group("src" FILES ${SRC})

# all header files
set(INC
    ${INCROOT}/Export.hpp
    ${INCROOT}/Graphics.hpp
    ${INCROOT}/Graphics.inl
    ${INCROOT}/Loader.hpp
    ${INCROOT}/GltfLoader.hpp
    ${INCROOT}/Resource.hpp
    ${INCROOT}/Resource.inl
    ${INCROOT}/ResourceManager.hpp
    ${INCROOT}/ResourceManager.inl

    ${INCROOT}/Builder/Material.hpp
    ${INCROOT}/Builder/Mesh.hpp

    ${INCROOT}/Light/Directional.hpp
    ${INCROOT}/Light/Light.hpp
    ${INCROOT}/Light/Light.inl
    ${INCROOT}/Light/Point.hpp
    ${INCROOT}/Light/Spot.hpp

    ${INCROOT}/Module.hpp
    ${INCROOT}/Module.inl
    ${INCROOT}/Node.hpp
    ${INCROOT}/Node.inl

    ${INCROOT}/Render/Camera.hpp
    ${INCROOT}/Render/Camera.inl
    ${INCROOT}/Render/Material.hpp
    ${INCROOT}/Render/Material.inl
    ${INCROOT}/Render/Mesh.hpp
    ${INCROOT}/Render/Mesh.inl
    ${INCROOT}/Render/Queue.hpp
    ${INCROOT}/Render/Queue.inl
    ${INCROOT}/Render/Target.hpp
    ${INCROOT}/Render/Target.inl
    ${INCROOT}/Render/Technique/Type.hpp
    ${INCROOT}/Render/View.hpp
    ${INCROOT}/Render/View.inl
    ${INCROOT}/Render/Window.hpp

    ${INCROOT}/Renderer.hpp
    ${INCROOT}/Renderer.inl

    ${INCROOT}/Scene/MeshInstance.hpp
    ${INCROOT}/Scene/MeshInstance.inl
    ${INCROOT}/Scene/MovableCamera.hpp
    ${INCROOT}/Scene/MovableObject.hpp
    ${INCROOT}/Scene/MovableObject.inl
    ${INCROOT}/Scene/Node.hpp
    ${INCROOT}/Scene/Node.inl
    ${INCROOT}/Scene/Scene.hpp
    ${INCROOT}/Scene/Scene.inl

    ${INCROOT}/Vulkan/API/Buffer.hpp
    ${INCROOT}/Vulkan/API/CommandBuffer.hpp
    ${INCROOT}/Vulkan/API/CommandPool.hpp
    ${INCROOT}/Vulkan/API/CommandPool.inl
    ${INCROOT}/Vulkan/API/DescriptorPool.hpp
    ${INCROOT}/Vulkan/API/DescriptorSet.hpp
    ${INCROOT}/Vulkan/API/DescriptorSetLayout.hpp
    ${INCROOT}/Vulkan/API/Device.hpp
    ${INCROOT}/Vulkan/API/Device.inl
    ${INCROOT}/Vulkan/API/DeviceMemory.hpp
    ${INCROOT}/Vulkan/API/Fence.hpp
    ${INCROOT}/Vulkan/API/Framebuffer.hpp
    ${INCROOT}/Vulkan/API/Image.hpp
    ${INCROOT}/Vulkan/API/ImageView.hpp
    ${INCROOT}/Vulkan/API/Instance.hpp
    ${INCROOT}/Vulkan/API/Instance.inl
    ${INCROOT}/Vulkan/API/Loader.hpp
    ${INCROOT}/Vulkan/API/Pipeline.hpp
    ${INCROOT}/Vulkan/API/PipelineLayout.hpp
    ${INCROOT}/Vulkan/API/Queue.hpp
    ${INCROOT}/Vulkan/API/Queue.inl
    ${INCROOT}/Vulkan/API/RTTI/Enum.hpp
    ${INCROOT}/Vulkan/API/RenderPass.hpp
    ${INCROOT}/Vulkan/API/Semaphore.hpp
    ${INCROOT}/Vulkan/API/ShaderModule.hpp
    ${INCROOT}/Vulkan/API/Swapchain.hpp
    ${INCROOT}/Vulkan/API/Swapchain.inl

    ${INCROOT}/Vulkan/Builder/Material.hpp
    ${INCROOT}/Vulkan/Builder/Mesh.hpp

    ${INCROOT}/Vulkan/Render/BufferPool.hpp
    ${INCROOT}/Vulkan/Render/Camera.hpp
    ${INCROOT}/Vulkan/Render/Material.hpp
    ${INCROOT}/Vulkan/Render/Mesh.hpp
    ${INCROOT}/Vulkan/Render/Mesh.inl
    ${INCROOT}/Vulkan/Render/Pipeline.hpp
    ${INCROOT}/Vulkan/Render/Pipeline.inl
    ${INCROOT}/Vulkan/Render/Technique/Forward.hpp
    ${INCROOT}/Vulkan/Render/Technique/Technique.hpp
    ${INCROOT}/Vulkan/Render/View.hpp
    ${INCROOT}/Vulkan/Render/View.inl
    ${INCROOT}/Vulkan/Render/Window.hpp
    ${INCROOT}/Vulkan/Render/Window.inl

    ${INCROOT}/Vulkan/Renderer.hpp
    ${INCROOT}/Vulkan/Renderer.inl
    ${INCROOT}/Vulkan/Vulkan.hpp
)
source_group("inc" FILES ${INC})

find_package(Vulkan)
if (NOT VULKAN_INCLUDE_DIR)
    if (NOT EXISTS "${CMAKE_SOURCE_DIR}/thirdparty/vulkan")
        message(FATAL_ERROR "Can't find vulkan, call `git submodule update --recursive`")
    endif()

    set(VULKAN_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/thirdparty/vulkan/include)
endif()

include_directories(${VULKAN_INCLUDE_DIR})

if(LUG_OS_ANDROID)
    list(APPEND EXT_LIBRARIES android)
endif()

# Find glTF2-loader
find_package(GLTF2-Loader)

if (NOT GLTF2-LOADER_FOUND)
    if (NOT EXISTS "${CMAKE_SOURCE_DIR}/thirdparty/glTF2-loader")
        message(FATAL_ERROR "Can't find glTF2-loader, call `git submodule update --recursive`")
    endif()

    set(GLTF2-LOADER_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/thirdparty/glTF2-loader/include")

    if (LUG_OS_WINDOWS)
        set(GLTF2-LOADER_ROOT "${CMAKE_SOURCE_DIR}/thirdparty/glTF2-loader/lib/windows/${ARCH_DIR}")
    elseif (LUG_OS_LINUX)
        set(GLTF2-LOADER_ROOT "${CMAKE_SOURCE_DIR}/thirdparty/glTF2-loader/lib/linux")
    elseif (LUG_OS_ANDROID)
        set(GLTF2-LOADER_ROOT "${CMAKE_SOURCE_DIR}/thirdparty/glTF2-loader/lib/android")
    endif()
    find_package(GLTF2-Loader REQUIRED)

    message(STATUS "Found glTF2-loader library: ${GLTF2-LOADER_LIBRARY}")
    message(STATUS "Found glTF2-loader includes: ${GLTF2-LOADER_INCLUDE_DIR}")
endif()

include_directories(${GLTF2-LOADER_INCLUDE_DIR})

# define the target
lug_add_library(lug-graphics
                SOURCES ${SRC} ${INC}
                DEPENDS lug-window lug-system lug-math
                EXTERNAL_LIBS ${EXT_LIBRARIES} ${GLTF2-LOADER_LIBRARY} ${SHADERC_LIBRARY}
)
