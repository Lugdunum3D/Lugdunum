#-------------------------------------------#
#      Lugdunum Appveyor configuration      #
#-------------------------------------------#

# version format
version: 1.0.{build}-{branch}

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: false

# Maximum number of concurrent jobs for the project
max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

environment:
    Toolset: v140

# this is how to allow failing jobs in the matrix
matrix:
  fast_finish: false     # set this flag to immediately finish build once one of the jobs fails.

# scripts that run after cloning repository
install:
  - git submodule update --init --recursive

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform:
  - x86
  - x64

# build Configuration, i.e. Debug, Release, etc.
configuration:
  - Debug
  - Release

build:
  project: Lugdunum.sln      # path to Visual Studio solution or project

  # MSBuild verbosity level
  verbosity: minimal

# scripts to run before build
before_build:
- ps: |
    Write-Output "Configuration: $env:CONFIGURATION"
    Write-Output "Platform: $env:PLATFORM"
    $generator = "Visual Studio 14 2015"
    if ($env:PLATFORM -eq "x64")
    {
      $generator = "$generator Win64"
    }

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# to run your custom scripts instead of automatic MSBuild
build_script:
- ps: |
    md build -Force | Out-Null
    cd build

    & cmake -G "$generator" -DCMAKE_CONFIGURATION_TYPES="Debug;Release" -T"${env:Toolset}_clang_c2" -DENABLE_TEST=TRUE ..
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }
    & cmake --build . --config $env:CONFIGURATION
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }

# scripts to run after build
after_build:
- ps: |
    Copy-Item .\lib\googletest\googletest\$env:CONFIGURATION\gtest.dll .\test\$env:CONFIGURATION\
    Copy-Item .\lib\googletest\googletest\$env:CONFIGURATION\gtest_main.dll .\test\$env:CONFIGURATION\
    Copy-Item .\lib\$env:CONFIGURATION\*.dll .\test\$env:CONFIGURATION\

#---------------------------------#
#       tests configuration       #
#---------------------------------#

test_script:
- ps: |
    & ctest -C $env:CONFIGURATION --output-on-failure
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:
  - path: 'build/Testing/Temporary/*'
    name: test_results

#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# to disable deployment
deploy: off
